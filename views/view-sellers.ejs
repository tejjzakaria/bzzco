<!doctype html>

<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default"
    data-bs-theme="light" data-assets-path="/assets/" data-template="vertical-menu-template">

<head>
    <meta charset="utf-8" />
    <meta name="viewport"
        content="width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0" />
    <meta name="robots" content="noindex, nofollow" />
    <title>Sellers - Bzz Co.</title>

    <meta name="description" content="" />
    <%- include("layout/header") %>
</head>

<body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
        <div class="layout-container">
            <!-- Menu -->

            <%- include("layout/sidebar") %>

                <div class="menu-mobile-toggler d-xl-none rounded-1">
                    <a href="javascript:void(0);"
                        class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
                        <i class="ri ri-menu-line icon-base"></i>
                        <i class="ri ri-arrow-right-s-line icon-base"></i>
                    </a>
                </div>
                <!-- / Menu -->

                <!-- Layout container -->
                <div class="layout-page">
                    <!-- Navbar -->

                    <%- include("layout/header") %>

                        <!-- / Navbar -->

                        <!-- Content wrapper -->
                        <div class="content-wrapper">
                            <!-- Content -->

                            <div class="container-xxl flex-grow-1 container-p-y">
                                <div class="row g-6 mb-6">
                                    <div class="col-sm-6 col-xl-3">
                                        <div class="card">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between">
                                                    <div class="me-1">
                                                        <p class="text-heading mb-1">Total Sellers</p>
                                                        <div class="d-flex align-items-center">
                                                            <h4 class="mb-1 me-2"><%= stats.total %></h4>
                                                            <p class="text-success mb-1">(100%)</p>
                                                        </div>
                                                        <small class="mb-0">Total Sellers</small>
                                                    </div>
                                                    <div class="avatar">
                                                        <div class="avatar-initial bg-label-primary rounded-3">
                                                            <div class="icon-base ri ri-group-line icon-26px"></div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6 col-xl-3">
                                        <div class="card">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between">
                                                    <div class="me-1">
                                                        <p class="text-heading mb-1">Plan A sellers</p>
                                                        <div class="d-flex align-items-center">
                                                            <h4 class="mb-1 me-1"><%= stats.planA %></h4>
                                                            <p class="text-success mb-1">(<%= stats.total > 0 ? Math.round((stats.planA / stats.total) * 100) : 0 %>%)</p>
                                                        </div>
                                                        <small class="mb-0">Plan A subscribers</small>
                                                    </div>
                                                    <div class="avatar">
                                                        <div class="avatar-initial bg-label-danger rounded">
                                                            <div
                                                                class="icon-base ri ri-user-add-line icon-26px scaleX-n1">
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6 col-xl-3">
                                        <div class="card">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between">
                                                    <div class="me-1">
                                                        <p class="text-heading mb-1">Plan B sellers</p>
                                                        <div class="d-flex align-items-center">
                                                            <h4 class="mb-1 me-1"><%= stats.planB %></h4>
                                                            <p class="text-success mb-1">(<%= stats.total > 0 ? Math.round((stats.planB / stats.total) * 100) : 0 %>%)</p>
                                                        </div>
                                                        <small class="mb-0">Plan B subscribers</small>
                                                    </div>
                                                    <div class="avatar">
                                                        <div class="avatar-initial bg-label-success rounded-3">
                                                            <div class="icon-base ri ri-user-follow-line icon-26px">
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6 col-xl-3">
                                        <div class="card">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between">
                                                    <div class="me-1">
                                                        <p class="text-heading mb-1">Plan C & D sellers</p>
                                                        <div class="d-flex align-items-center">
                                                            <h4 class="mb-1 me-1"><%= stats.planC + stats.planD %></h4>
                                                            <p class="text-success mb-1">(<%= stats.total > 0 ? Math.round(((stats.planC + stats.planD) / stats.total) * 100) : 0 %>%)</p>
                                                        </div>
                                                        <small class="mb-0">Plan C & D subscribers</small>
                                                    </div>
                                                    <div class="avatar">
                                                        <div class="avatar-initial bg-label-warning rounded-3">
                                                            <div class="icon-base ri ri-user-search-line icon-26px">
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <!-- sellers List Table -->
                                <div class="card">
                                    <div class="card-header border-bottom">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <h5 class="card-title mb-0">Sellers List</h5>
                                        </div>
                                        <div class="d-flex justify-content-between align-items-center row gx-5 pt-4 gap-5 gap-md-0">
                                            <div class="col-md-4 user_role"></div>
                                            <div class="col-md-4 user_plan"></div>
                                            <div class="col-md-4 user_status"></div>
                                        </div>
                                    </div>
                                    <div class="card-datatable">
                                        <table class="datatables-users table">
                                            <thead>
                                                <tr>
                                                    <th></th>
                                                    <th></th>
                                                    <th>Seller</th>
                                                    <th>Email</th>
                                                    <th>Phone</th>
                                                    <th>Company</th>
                                                    <th>Plan</th>
                                                    <th>Country</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                        </table>
                                    </div>
                                    <!-- Offcanvas to add new user -->
                                    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasAddUser"
                                        aria-labelledby="offcanvasAddUserLabel">
                                        <div class="offcanvas-header border-bottom">
                                            <h5 id="offcanvasAddUserLabel" class="offcanvas-title">Add Seller</h5>
                                            <button type="button" class="btn-close text-reset"
                                                data-bs-dismiss="offcanvas" aria-label="Close"></button>
                                        </div>
                                        <div class="offcanvas-body mx-0 flex-grow-0 h-100">
                                            <form action="/add-seller" method="POST" class="add-new-user pt-0"
                                                id="addNewUserForm">
                                                <div
                                                    class="form-floating form-floating-outline mb-5 form-control-validation">
                                                    <input type="text" class="form-control" id="add-user-fullname"
                                                        placeholder="John Doe" name="full_name" aria-label="John Doe" />
                                                    <label for="add-user-fullname">Full Name</label>
                                                </div>
                                                <div
                                                    class="form-floating form-floating-outline mb-5 form-control-validation">
                                                    <input type="text" id="add-user-email" class="form-control"
                                                        placeholder="john.doe@example.com"
                                                        aria-label="john.doe@example.com" name="email" />
                                                    <label for="add-user-email">Email</label>
                                                </div>
                                                <div class="form-floating form-floating-outline mb-5">
                                                    <input type="text" id="add-user-contact"
                                                        class="form-control phone-mask" placeholder="+31 6 00 00 00 00"
                                                        aria-label="john.doe@example.com" name="phone_number" />
                                                    <label for="add-user-contact">Phone Number</label>
                                                </div>
                                                <div class="form-floating form-floating-outline mb-5">
                                                    <input type="text" id="add-user-company" class="form-control"
                                                        placeholder="Web Developer" aria-label="jdoe1" name="company" />
                                                    <label for="add-user-company">Company</label>
                                                </div>
                                                <div class="form-floating form-floating-outline mb-5">
                                                    <select id="country" class="select2 form-select" name="country">
                                                        <option value="">Select</option>
                                                        <option value="Australia">Australia</option>
                                                        <option value="Bangladesh">Bangladesh</option>
                                                        <option value="Belarus">Belarus</option>
                                                        <option value="Brazil">Brazil</option>
                                                        <option value="Canada">Canada</option>
                                                        <option value="China">China</option>
                                                        <option value="France">France</option>
                                                        <option value="Germany">Germany</option>
                                                        <option value="India">India</option>
                                                        <option value="Indonesia">Indonesia</option>
                                                        <option value="Israel">Israel</option>
                                                        <option value="Italy">Italy</option>
                                                        <option value="Japan">Japan</option>
                                                        <option value="Korea">Korea, Republic of</option>
                                                        <option value="Mexico">Mexico</option>
                                                        <option value="Philippines">Philippines</option>
                                                        <option value="Russia">Russian Federation</option>
                                                        <option value="South Africa">South Africa</option>
                                                        <option value="Thailand">Thailand</option>
                                                        <option value="Turkey">Turkey</option>
                                                        <option value="Ukraine">Ukraine</option>
                                                        <option value="United Arab Emirates">United Arab Emirates
                                                        </option>
                                                        <option value="United Kingdom">United Kingdom</option>
                                                        <option value="United States">United States</option>
                                                    </select>
                                                    <label for="country">Country</label>
                                                </div>

                                                <div class="form-floating form-floating-outline mb-5">
                                                    <select id="user-plan" class="form-select" name="plan">
                                                        <option value="Plan A">Plan A</option>
                                                        <option value="Plan B">Plan B</option>
                                                        <option value="Plan C">Plan C</option>
                                                        <option value="Plan D">Plan D</option>
                                                    </select>
                                                    <label for="user-plan">Select Plan</label>
                                                </div>

                                                <button type="submit" class="btn btn-primary me-sm-3 me-1 data-submit"
                                                    >Add</button>
                                                <button type="reset" class="btn btn-outline-danger"
                                                    data-bs-dismiss="offcanvas">Cancel</button>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- / Content -->

                            <!-- Footer -->
                            <%- include("layout/footer") %>
                                <!-- / Footer -->

                                <div class="content-backdrop fade"></div>
                        </div>
                        <!-- Content wrapper -->
                </div>
                <!-- / Layout page -->
        </div>

        <!-- Overlay -->
        <div class="layout-overlay layout-menu-toggle"></div>

        <!-- Drag Target Area To SlideIn Menu On Small Screens -->
        <div class="drag-target"></div>
    </div>
    <!-- / Layout wrapper -->
    <% if (message) { %>
        <script>
            Swal.fire({
                icon: '<%= message.type %>',
                title: '<%= message.type === "success" ? "Success" : "Error" %>',
                text: '<%= message.text %>',
                confirmButtonColor: '#3085d6'
            });
            
            // Auto refresh DataTable after 2 seconds if success
            var messageType = '<%= message.type %>';
            if (messageType === 'success') {
                setTimeout(function() {
                    if (window.jQuery && $('.datatables-users').length && $.fn.DataTable.isDataTable('.datatables-users')) {
                        $('.datatables-users').DataTable().ajax.reload(null, false);
                    }
                }, 2000);
            }
        </script>
    <% } %>

    <!-- DataTables Initialization -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            let borderColor, bodyBg, headingColor;

            // Get config colors if available
            if (typeof config !== 'undefined') {
                borderColor = config.colors.borderColor;
                bodyBg = config.colors.bodyBg;
                headingColor = config.colors.headingColor;
            }

            // Variable declaration for table
            const dt_user_table = document.querySelector('.datatables-users'),
                userView = 'app-user-view-account.html',
                statusObj = {
                    1: { title: 'Pending', class: 'bg-label-warning' },
                    2: { title: 'Active', class: 'bg-label-success' },
                    3: { title: 'Inactive', class: 'bg-label-secondary' }
                };

            var select2 = $('.select2');

            if (select2.length) {
                var $this = select2;
                select2Focus($this);
                $this.select2({
                    placeholder: 'Select Country',
                    dropdownParent: $this.parent()
                });
            }

            // Users datatable
            if (dt_user_table) {
                const dt_user = new DataTable(dt_user_table, {
                    ajax: '/api/sellers', // Use our API endpoint
                    columns: [
                        // columns according to JSON
                        { data: '_id' },
                        { data: '_id', orderable: false, render: DataTable.render.select() },
                        { data: 'full_name' },
                        { data: 'email' },
                        { data: 'phone_number' },
                        { data: 'company' },
                        { data: 'plan' },
                        { data: 'country' },
                        { data: null, orderable: false, searchable: false } // Actions column
                    ],
                    columnDefs: [
                        {
                            // For Responsive
                            className: 'control',
                            searchable: false,
                            orderable: false,
                            responsivePriority: 2,
                            targets: 0,
                            render: function (data, type, full, meta) {
                                return '';
                            }
                        },
                        {
                            // For Checkboxes
                            targets: 1,
                            orderable: false,
                            searchable: false,
                            responsivePriority: 4,
                            checkboxes: true,
                            render: function () {
                                return '<input type="checkbox" class="dt-checkboxes form-check-input">';
                            },
                            checkboxes: {
                                selectAllRender: '<input type="checkbox" class="form-check-input">'
                            }
                        },
                        {
                            targets: 2,
                            responsivePriority: 4,
                            render: function (data, type, full, meta) {
                                var name = full['full_name'];
                                var email = full['email'];
                                var output;

                                // For Avatar badge - since we don't have images, create initials
                                var stateNum = Math.floor(Math.random() * 6);
                                var states = ['success', 'danger', 'warning', 'info', 'dark', 'primary', 'secondary'];
                                var state = states[stateNum];
                                var initials = (name.match(/\b\w/g) || []).map(char => char.toUpperCase());
                                initials = ((initials.shift() || '') + (initials.pop() || '')).toUpperCase();
                                output = '<span class="avatar-initial rounded-circle bg-label-' + state + '">' + initials + '</span>';

                                // Creates full output for row
                                var row_output =
                                    '<div class="d-flex justify-content-start align-items-center user-name">' +
                                    '<div class="avatar-wrapper">' +
                                    '<div class="avatar avatar-sm me-4">' +
                                    output +
                                    '</div>' +
                                    '</div>' +
                                    '<div class="d-flex flex-column">' +
                                    '<span class="text-heading text-truncate fw-medium">' +
                                    name +
                                    '</span>' +
                                    '<small>' +
                                    email +
                                    '</small>' +
                                    '</div>' +
                                    '</div>';
                                return row_output;
                            }
                        },
                        {
                            // User email
                            targets: 3,
                            render: function (data, type, full, meta) {
                                let email = full['email'];
                                return '<span>' + email + '</span>';
                            }
                        },
                        {
                            // Phone number
                            targets: 4,
                            render: function (data, type, full, meta) {
                                let phone = full['phone_number'];
                                return '<span class="text-heading">' + phone + '</span>';
                            }
                        },
                        {
                            // Company
                            targets: 5,
                            render: function (data, type, full, meta) {
                                var company = full['company'] || 'Not specified';
                                return '<span class="text-heading">' + company + '</span>';
                            }
                        },
                        {
                            // Plans
                            targets: 6,
                            render: function (data, type, full, meta) {
                                const plan = full['plan'];
                                return '<span class="badge bg-label-primary">' + plan + '</span>';
                            }
                        },
                        {
                            // Country
                            targets: 7,
                            render: function (data, type, full, meta) {
                                const country = full['country'];
                                return '<span class="text-heading">' + country + '</span>';
                            }
                        },
                        {
                            targets: -1,
                            title: 'Actions',
                            searchable: false,
                            orderable: false,
                            render: (data, type, full, meta) => {
                                const sellerId = full['_id'];
                                return `
                                  <div class="d-flex align-items-center gap-1">
                                    <button type="button" class="btn btn-icon btn-text-secondary rounded-pill edit-record" data-seller-id="${sellerId}" title="Edit seller">
                                      <i class="icon-base ri ri-edit-line icon-md text-primary"></i>
                                    </button>
                                    <button type="button" class="btn btn-icon btn-text-secondary rounded-pill delete-record" data-seller-id="${sellerId}" title="Delete seller">
                                      <i class="icon-base ri ri-delete-bin-7-line icon-md text-danger"></i>
                                    </button>
                                  </div>
                                `;
                            }
                        }
                    ],
                    select: {
                        style: 'multi',
                        selector: 'td:nth-child(2)'
                    },
                    order: [[2, 'desc']],
                    layout: {
                        topStart: {
                            rowClass: 'row m-2 my-0 mt-0 justify-content-between',
                            features: [
                                {
                                    buttons: [
                                        {
                                            extend: 'collection',
                                            className: 'btn btn-outline-secondary dropdown-toggle waves-effect',
                                            text: '<span class="d-flex align-items-center gap-2"><i class="icon-base ri ri-upload-2-line icon-16px me-sm-1"></i> <span class="d-none d-sm-inline-block">Export</span></span>',
                                            buttons: [
                                                {
                                                    extend: 'print',
                                                    text: `<span class="d-flex align-items-center"><i class="icon-base ri ri-printer-line me-1"></i>Print</span>`,
                                                    className: 'dropdown-item',
                                                    exportOptions: {
                                                        columns: [2, 3, 4, 5, 6, 7],
                                                        format: {
                                                            body: function (inner, coldex, rowdex) {
                                                                if (inner.length <= 0) return inner;
                                                                const el = new DOMParser().parseFromString(inner, 'text/html').body.childNodes;
                                                                let result = '';
                                                                el.forEach(item => {
                                                                    if (item.classList && item.classList.contains('user-name')) {
                                                                        result += item.lastChild.firstChild.textContent;
                                                                    } else {
                                                                        result += item.textContent || item.innerText || '';
                                                                    }
                                                                });
                                                                return result;
                                                            }
                                                        }
                                                    },
                                                    customize: function (win) {
                                                        if (typeof config !== 'undefined') {
                                                            win.document.body.style.color = config.colors.headingColor;
                                                            win.document.body.style.borderColor = config.colors.borderColor;
                                                            win.document.body.style.backgroundColor = config.colors.bodyBg;
                                                        }
                                                        const table = win.document.body.querySelector('table');
                                                        table.classList.add('compact');
                                                        table.style.color = 'inherit';
                                                        table.style.borderColor = 'inherit';
                                                        table.style.backgroundColor = 'inherit';
                                                    }
                                                },
                                                {
                                                    extend: 'csv',
                                                    text: `<span class="d-flex align-items-center"><i class="icon-base ri ri-file-text-line me-1"></i>Csv</span>`,
                                                    className: 'dropdown-item',
                                                    exportOptions: {
                                                        columns: [2, 3, 4, 5, 6, 7],
                                                        format: {
                                                            body: function (inner, coldex, rowdex) {
                                                                if (inner.length <= 0) return inner;
                                                                const el = new DOMParser().parseFromString(inner, 'text/html').body.childNodes;
                                                                let result = '';
                                                                el.forEach(item => {
                                                                    if (item.classList && item.classList.contains('user-name')) {
                                                                        result += item.lastChild.firstChild.textContent;
                                                                    } else {
                                                                        result += item.textContent || item.innerText || '';
                                                                    }
                                                                });
                                                                return result;
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    extend: 'excel',
                                                    text: `<span class="d-flex align-items-center"><i class="icon-base ri ri-file-excel-line me-1"></i>Excel</span>`,
                                                    className: 'dropdown-item',
                                                    exportOptions: {
                                                        columns: [2, 3, 4, 5, 6, 7],
                                                        format: {
                                                            body: function (inner, coldex, rowdex) {
                                                                if (inner.length <= 0) return inner;
                                                                const el = new DOMParser().parseFromString(inner, 'text/html').body.childNodes;
                                                                let result = '';
                                                                el.forEach(item => {
                                                                    if (item.classList && item.classList.contains('user-name')) {
                                                                        result += item.lastChild.firstChild.textContent;
                                                                    } else {
                                                                        result += item.textContent || item.innerText || '';
                                                                    }
                                                                });
                                                                return result;
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    extend: 'pdf',
                                                    text: `<span class="d-flex align-items-center"><i class="icon-base ri ri-file-pdf-line me-1"></i>Pdf</span>`,
                                                    className: 'dropdown-item',
                                                    exportOptions: {
                                                        columns: [2, 3, 4, 5, 6, 7],
                                                        format: {
                                                            body: function (inner, coldex, rowdex) {
                                                                if (inner.length <= 0) return inner;
                                                                const el = new DOMParser().parseFromString(inner, 'text/html').body.childNodes;
                                                                let result = '';
                                                                el.forEach(item => {
                                                                    if (item.classList && item.classList.contains('user-name')) {
                                                                        result += item.lastChild.firstChild.textContent;
                                                                    } else {
                                                                        result += item.textContent || item.innerText || '';
                                                                    }
                                                                });
                                                                return result;
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    extend: 'copy',
                                                    text: `<i class="icon-base ri ri-file-copy-line me-1"></i>Copy`,
                                                    className: 'dropdown-item',
                                                    exportOptions: {
                                                        columns: [2, 3, 4, 5, 6, 7],
                                                        format: {
                                                            body: function (inner, coldex, rowdex) {
                                                                if (inner.length <= 0) return inner;
                                                                const el = new DOMParser().parseFromString(inner, 'text/html').body.childNodes;
                                                                let result = '';
                                                                el.forEach(item => {
                                                                    if (item.classList && item.classList.contains('user-name')) {
                                                                        result += item.lastChild.firstChild.textContent;
                                                                    } else {
                                                                        result += item.textContent || item.innerText || '';
                                                                    }
                                                                });
                                                                return result;
                                                            }
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        topEnd: {
                            features: [
                                {
                                    search: {
                                        placeholder: 'Search User',
                                        text: '_INPUT_'
                                    }
                                },
                                {
                                    buttons: [
                                        {
                                            text: '<i class="icon-base ri ri-add-line icon-sm me-0 me-sm-2 d-sm-none d-inline-block"></i><span class="d-none d-sm-inline-block">Add New Seller</span>',
                                            className: 'add-new btn btn-primary',
                                            attr: {
                                                'data-bs-toggle': 'offcanvas',
                                                'data-bs-target': '#offcanvasAddUser'
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        bottomStart: {
                            rowClass: 'row mx-3 justify-content-between',
                            features: ['info']
                        },
                        bottomEnd: 'paging'
                    },
                    language: {
                        paginate: {
                            next: '<i class="icon-base ri ri-arrow-right-s-line scaleX-n1-rtl icon-22px"></i>',
                            previous: '<i class="icon-base ri ri-arrow-left-s-line scaleX-n1-rtl icon-22px"></i>',
                            first: '<i class="icon-base ri ri-skip-back-mini-line scaleX-n1-rtl icon-22px"></i>',
                            last: '<i class="icon-base ri ri-skip-forward-mini-line scaleX-n1-rtl icon-22px"></i>'
                        }
                    },
                    // For responsive popup
                    responsive: {
                        details: {
                            display: DataTable.Responsive.display.modal({
                                header: function (row) {
                                    const data = row.data();
                                    return 'Details of ' + data['full_name'];
                                }
                            }),
                            type: 'column',
                            renderer: function (api, rowIdx, columns) {
                                const data = columns
                                    .map(function (col) {
                                        return col.title !== '' // Do not show row in modal popup if title is blank (for check box)
                                            ? `<tr data-dt-row="${col.rowIndex}" data-dt-column="${col.columnIndex}">
                          <td>${col.title}:</td>
                          <td>${col.data}</td>
                        </tr>`
                                            : '';
                                    })
                                    .join('');

                                if (data) {
                                    const div = document.createElement('div');
                                    div.classList.add('table-responsive');
                                    const table = document.createElement('table');
                                    div.appendChild(table);
                                    table.classList.add('table');
                                    const tbody = document.createElement('tbody');
                                    tbody.innerHTML = data;
                                    table.appendChild(tbody);
                                    return div;
                                }
                                return false;
                            }
                        }
                    },
                    initComplete: function () {
                        const api = this.api();

                        // Helper function to create a select dropdown and append options
                        const createFilter = (columnIndex, containerClass, selectId, defaultOptionText) => {
                            const column = api.column(columnIndex);
                            const select = document.createElement('select');
                            select.id = selectId;
                            select.className = 'form-select text-capitalize';
                            select.innerHTML = `<option value="">${defaultOptionText}</option>`;
                            document.querySelector(containerClass).appendChild(select);

                            // Add event listener for filtering
                            select.addEventListener('change', () => {
                                const val = select.value ? `^${select.value}$` : '';
                                column.search(val, true, false).draw();
                            });

                            // Populate options based on unique column data
                            const uniqueData = Array.from(new Set(column.data().toArray())).sort();
                            uniqueData.forEach(d => {
                                const option = document.createElement('option');
                                option.value = d;
                                option.textContent = d;
                                select.appendChild(option);
                            });
                        };

                        // Company filter
                        createFilter(5, '.user_role', 'UserRole', 'Select Company');

                        // Plan filter
                        createFilter(6, '.user_plan', 'UserPlan', 'Select Plan');

                        // Country filter
                        const countryFilter = document.createElement('select');
                        countryFilter.id = 'FilterCountry';
                        countryFilter.className = 'form-select text-capitalize';
                        countryFilter.innerHTML = '<option value="">Select Country</option>';
                        document.querySelector('.user_status').appendChild(countryFilter);
                        countryFilter.addEventListener('change', () => {
                            const val = countryFilter.value ? `^${countryFilter.value}$` : '';
                            api.column(7).search(val, true, false).draw();
                        });

                        const countryColumn = api.column(7);
                        const uniqueCountryData = Array.from(new Set(countryColumn.data().toArray())).sort();
                        uniqueCountryData.forEach(d => {
                            const option = document.createElement('option');
                            option.value = d;
                            option.textContent = d;
                            option.className = 'text-capitalize';
                            countryFilter.appendChild(option);
                        });
                    }
                });

                //? Enhanced delete functionality with confirmation
                function deleteRecord(sellerId, event) {
                    Swal.fire({
                        title: 'Are you sure?',
                        text: "You won't be able to revert this!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, delete it!',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Make API call to delete seller
                            fetch(`/api/sellers/${sellerId}`, {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json',
                                }
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire({
                                        title: 'Deleted!',
                                        text: 'seller has been deleted successfully.',
                                        icon: 'success',
                                        confirmButtonColor: '#3085d6'
                                    });
                                    // Refresh DataTable
                                    dt_user.ajax.reload(null, false);
                                } else {
                                    Swal.fire({
                                        title: 'Error!',
                                        text: data.message || 'Failed to delete seller.',
                                        icon: 'error',
                                        confirmButtonColor: '#3085d6'
                                    });
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'An error occurred while deleting the seller.',
                                    icon: 'error',
                                    confirmButtonColor: '#3085d6'
                                });
                            });
                        }
                    });
                }

                //? Edit functionality to populate form with seller data
                function editRecord(sellerId) {
                    // Fetch seller data
                    fetch(`/api/sellers/${sellerId}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success && data.seller) {
                                const seller = data.seller;
                                
                                // Populate form fields
                                document.getElementById('add-user-fullname').value = seller.full_name || '';
                                document.getElementById('add-user-email').value = seller.email || '';
                                document.getElementById('add-user-contact').value = seller.phone_number || '';
                                document.getElementById('add-user-company').value = seller.company || '';
                                document.getElementById('country').value = seller.country || '';
                                document.getElementById('user-plan').value = seller.plan || '';
                                
                                // Change form mode to edit
                                const form = document.getElementById('addNewUserForm');
                                form.dataset.mode = 'edit';
                                form.dataset.sellerId = sellerId;
                                
                                // Update form title and button
                                const offcanvasTitle = document.querySelector('#offcanvasAddUser .offcanvas-title');
                                if (offcanvasTitle) {
                                    offcanvasTitle.textContent = 'Edit seller';
                                }
                                const submitButton = document.querySelector('.data-submit');
                                if (submitButton) {
                                    submitButton.textContent = 'Update';
                                }
                                
                                // Show the offcanvas
                                const offcanvas = new bootstrap.Offcanvas(document.getElementById('offcanvasAddUser'));
                                offcanvas.show();
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'Failed to fetch seller data.',
                                    icon: 'error',
                                    confirmButtonColor: '#3085d6'
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire({
                                title: 'Error!',
                                text: 'An error occurred while fetching seller data.',
                                icon: 'error',
                                confirmButtonColor: '#3085d6'
                            });
                        });
                }

                function bindActionEvents() {
                    const userListTable = document.querySelector('.datatables-users');
                    const modal = document.querySelector('.dtr-bs-modal');

                    if (userListTable && userListTable.classList.contains('collapsed')) {
                        if (modal) {
                            modal.addEventListener('click', function (event) {
                                const target = event.target.closest('.delete-record, .edit-record');
                                if (target) {
                                    const sellerId = target.dataset.sellerId;
                                    if (target.classList.contains('delete-record')) {
                                        deleteRecord(sellerId, event);
                                        const closeButton = modal.querySelector('.btn-close');
                                        if (closeButton) closeButton.click();
                                    } else if (target.classList.contains('edit-record')) {
                                        editRecord(sellerId);
                                        const closeButton = modal.querySelector('.btn-close');
                                        if (closeButton) closeButton.click();
                                    }
                                }
                            });
                        }
                    } else {
                        const tableBody = userListTable?.querySelector('tbody');
                        if (tableBody) {
                            tableBody.addEventListener('click', function (event) {
                                const target = event.target.closest('.delete-record, .edit-record');
                                if (target) {
                                    const sellerId = target.dataset.sellerId;
                                    if (target.classList.contains('delete-record')) {
                                        deleteRecord(sellerId, event);
                                    } else if (target.classList.contains('edit-record')) {
                                        editRecord(sellerId);
                                    }
                                }
                            });
                        }
                    }
                }

                // Initial event binding
                bindActionEvents();

                // Re-bind events when modal is shown or hidden
                document.addEventListener('show.bs.modal', function (event) {
                    if (event.target.classList.contains('dtr-bs-modal')) {
                        bindActionEvents();
                    }
                });

                document.addEventListener('hide.bs.modal', function (event) {
                    if (event.target.classList.contains('dtr-bs-modal')) {
                        bindActionEvents();
                    }
                });
            }

            // Filter form control to default size
            // ? setTimeout used for user-list table initialization
            setTimeout(() => {
                const elementsToModify = [
                    { selector: '.dt-buttons .btn', classToRemove: 'btn-secondary' },
                    { selector: '.dt-length .form-select', classToAdd: 'ms-0' },
                    { selector: '.dt-length', classToAdd: 'mb-md-4 mb-0' },
                    {
                        selector: '.dt-layout-end',
                        classToRemove: 'justify-content-between',
                        classToAdd: 'd-flex gap-md-4 justify-content-md-between justify-content-center gap-md-2 flex-wrap mt-0'
                    },
                    { selector: '.dt-layout-start', classToAdd: 'mt-md-0 mt-5' },
                    {
                        selector: '.dt-layout-start .dt-buttons',
                        classToAdd: 'd-md-flex d-block gap-4 justify-content-center'
                    },
                    {
                        selector: '.dt-layout-end .dt-buttons',
                        classToAdd: 'd-md-flex d-block gap-4 mb-md-0 mb-5 justify-content-center'
                    },
                    { selector: '.dt-layout-table', classToRemove: 'row mt-2' },
                    { selector: '.dt-layout-full', classToRemove: 'col-md col-12' },
                    { selector: '.dt-layout-full .table', classToAdd: 'table-responsive' }
                ];

                // Delete record
                elementsToModify.forEach(({ selector, classToRemove, classToAdd }) => {
                    document.querySelectorAll(selector).forEach(element => {
                        if (classToRemove) {
                            classToRemove.split(' ').forEach(className => element.classList.remove(className));
                        }
                        if (classToAdd) {
                            classToAdd.split(' ').forEach(className => element.classList.add(className));
                        }
                    });
                });
            }, 100);

            // Validation & Phone mask
            const phoneMaskList = document.querySelectorAll('.phone-mask'),
                addNewUserForm = document.getElementById('addNewUserForm');

            // Phone Number
            if (phoneMaskList) {
                phoneMaskList.forEach(function (phoneMask) {
                    phoneMask.addEventListener('input', event => {
                        const cleanValue = event.target.value.replace(/\D/g, '');
                        phoneMask.value = formatGeneral(cleanValue, {
                            blocks: [3, 3, 4],
                            delimiters: [' ', ' ']
                        });
                    });
                    registerCursorTracker({
                        input: phoneMask,
                        delimiter: ' '
                    });
                });
            }
            // Form validation disabled - form will submit directly
            // const fv = FormValidation.formValidation(addNewUserForm, {
            //   // Validation configuration removed
            // });

            // Handle form submission for both add and edit modes
            if (addNewUserForm) {
                addNewUserForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const formData = new FormData(addNewUserForm);
                    const sellerData = Object.fromEntries(formData.entries());
                    
                    const isEditMode = addNewUserForm.dataset.mode === 'edit';
                    const sellerId = addNewUserForm.dataset.sellerId;
                    
                    const url = isEditMode ? `/api/sellers/${sellerId}` : '/api/sellers';
                    const method = isEditMode ? 'PUT' : 'POST';
                    
                    fetch(url, {
                        method: method,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(sellerData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: isEditMode ? 'seller updated successfully!' : 'seller added successfully!',
                                confirmButtonColor: '#3085d6'
                            });
                            
                            // Reset form and close offcanvas
                            addNewUserForm.reset();
                            addNewUserForm.removeAttribute('data-mode');
                            addNewUserForm.removeAttribute('data-seller-id');
                            
                            // Reset form title and button
                            const offcanvasTitle = document.querySelector('#offcanvasAddUser .offcanvas-title');
                            if (offcanvasTitle) {
                                offcanvasTitle.textContent = 'Add New seller';
                            }
                            const submitButton = document.querySelector('.data-submit');
                            if (submitButton) {
                                submitButton.textContent = 'Add';
                            }
                            
                            // Close offcanvas
                            const offcanvasElement = document.getElementById('offcanvasAddUser');
                            const offcanvas = bootstrap.Offcanvas.getInstance(offcanvasElement);
                            if (offcanvas) {
                                offcanvas.hide();
                            }
                            
                            // Refresh DataTable
                            setTimeout(() => {
                                if (dt_user && dt_user.ajax) {
                                    dt_user.ajax.reload(null, false);
                                }
                            }, 1000);
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message || (isEditMode ? 'Failed to update seller.' : 'Failed to add seller.'),
                                confirmButtonColor: '#3085d6'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while processing the request.',
                            confirmButtonColor: '#3085d6'
                        });
                    });
                });
            }

            // Reset form when offcanvas is hidden
            document.getElementById('offcanvasAddUser').addEventListener('hidden.bs.offcanvas', function () {
                if (addNewUserForm) {
                    addNewUserForm.reset();
                    addNewUserForm.removeAttribute('data-mode');
                    addNewUserForm.removeAttribute('data-seller-id');
                    
                    // Reset form title and button
                    const offcanvasTitle = document.querySelector('#offcanvasAddUser .offcanvas-title');
                    if (offcanvasTitle) {
                        offcanvasTitle.textContent = 'Add New seller';
                    }
                    const submitButton = document.querySelector('.data-submit');
                    if (submitButton) {
                        submitButton.textContent = 'Add';
                    }
                }
            });
        });
    </script>
</body>

</html>